/**
 * line-length-check.js
 */
var assert = require('assert');
var TestReporter = require('./../test-reporter');

var comcheck;
var reporter;

describe('line-length-check', () => {
    beforeEach(() => {
        reporter = new TestReporter();
        comcheck = require('../../index')({
            headerLength: 50,
            lineLength: 72
        });
        comcheck.register(require('../../checks/line-length-check').id);
    });

    it('should handle a well formatted sample message', () => {
        comcheck.check([
            'Capitalize short (50 chars or less) summary',
            '',
            'More detailed explanatory text, if necessary. Wrap it to about 72',
            'characters or so. In some contexts, the first line is treated as the',
            'subject of an email and the rest of the text as the body. The blank',
            'line separating the summary from the body is critical (unless you omit',
            'the body entirely); tools like rebase can get confused if you run the',
            'two together.',
            '',
            'Write your commit message in the imperative: "Fix bug" and not "Fixed',
            'bug" or "Fixes bug." This convention matches up with commit messages',
            'generated by commands like git merge and git revert.',
            '',
            'Further paragraphs come after blank lines.',
            '',
            '- Bullet points are okay, too',
            '',
            '- Typically a hyphen or asterisk is used for the bullet, followed by a',
            '  single space, with blank lines in between, but conventions vary here',
            '',
            '- Use a hanging indent'], reporter);
        reporter.check();
    });

    it('should not report if the lines have the maximum allowed length', () => {
        comcheck.check([
            'This header is not exceeding the maximum sssubject',
            '',
            'This line does not exceed the line length but is expanded to the maximum'], reporter);
        reporter.check();
    });

    it('should report an exceeding header', () => {
        comcheck.check('This header is definitely too loooooooooooooooooooong', reporter);
        reporter.check({text: 'ong', row: 1, column: 51});
    });

    it('should report exceeding lines in the body', () => {
        comcheck.check([
            'Some header',
            '',
            'This line',
            'is toooooooooooooooooooooooooooooooooooooooooooooooooooooooo loooooooooooooooooong',
            'Like this toooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo'], reporter);
        reporter.check([
            {text: 'oooooooong', row: 4, column: 73},
            {text: 'o', row: 5, column: 73}
        ]);
    });

    it('should allow exceeding lines which do not contain a whitespace', () => {
        comcheck.check([
            'A header',
            '',
            'http://developer.android.com/training/basics/firstapp/running-app.html#Emulator',
            'some_other_very_loooooooooooooooooooooooooooooooooong_resource_which_cant_be_splitted'], reporter);
        reporter.check();
    });

    it('should allow exceeding lines which indicators sources', () => {
        comcheck.check([
            'A header',
            '',
            '[1] http://developer.android.com/training/basics/firstapp/running-app.html#Emulator',
            '[2] http://developer.android.com/training/basics/firstapp/running-app.html#RealDevice'], reporter);
        reporter.check();
    });

    it('should report exceeding lines which indicators sources but could be splitted', () => {
        comcheck.check([
            'A header',
            '',
            '[1] http://developer.android.com training/basics/firstapp/running-app.html#Emulator'], reporter);
        reporter.check({text: 'ml#Emulator', row: 3, column: 73});
    });
});
